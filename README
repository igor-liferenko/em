EM is a UTF-8 capable text editor, written in CWEB.

I have taken the C source from

    http://github.com/hughbarney/zep

and converted it to CWEB, then added UTF-8
support (using wide-character API).
To build it, just type `make'. You will need
ctangle/cweave binaries.

While wide-character support is present in CWEB,
unfortunately it is not complete. There are these two
small issues:

1. Spaces are removed before string literals, and
the `L' wide-character string and character modifer
sticks to previous token.

For CTANGLE, this can be worked around by prefixing the
`L' modifier with a newline. Unfortunately, this does not
always work for CWEAVE. I did not try to figure
out the proper fix for this yet.

2. There is only "wchar_t" type and no "wint_t" type in CWEB
syntax parsing rules. This causes TeX output to be formatted
incorrectly.
It is possible to use workaround like
"@s wint_t wchar_t", but I just changed my local copy of cweave
instead (just added the same stuff for "wint_t" as for "wchar_t").

The things which I'm currently planning to add to EM are:

* automatically save cursor position on exit and restore on open
* implement proper job control as said here:
  http://web.archive.org/web/20160329140839/http://www.cons.org/cracauer/sigint.html
* handle gnome-terminal window resize

I am indepted to Hugh Barney on whose initial ideas and code
EM is based.

I also want to express my gratitude to Silvio Levy and
Donald Knuth for CWEB.

-----------------------------------------------------------

For those, who are not fond of CWEB, the following may be used
to reformat tangled output:

perl -i -pe 's!/\*.*\*/$!\n$&!' em.c
perl -i -ne 'if(/^#line \d+/){undef$prev}else{if(defined$prev){print$prev}$prev=$_}if(eof){print unless m!^/\*.*\*/$!}' em.c
cat -s em.c | indent -kr > em.tmp && mv em.tmp em.c
perl -i -0777 -pe 's/^\s*//' em.c
perl -i -0777 -pe 's/\s+\\(?=\n\n)//g' em.c; perl -i -0777 -pe 's/\s+\\(?=\n\n)//g' em.c

(WARNING: valuable documentation from .w file will be skipped from .c file, because it is intended
only for the eyes of the C compiler)

--

April 2017.

Igor Liferenko
